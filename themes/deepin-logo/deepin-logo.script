# Copyright (C) 2011 ~ 2012 Deepin, Inc.
#               2011 ~ 2012 Hou Shaohui
# 
# Author:     Hou Shaohui <houshao55@gmail.com>
# Maintainer: Hou Shaohui <houshao55@gmail.com>
#             Zhai Xiang <zhaixiang@linuxdeepin.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set Background Color
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

# Show logo
logo.image = Image("loading_180.png");
logo.sprite = Sprite(logo.image);
logo.x = Window.GetX() + Window.GetWidth() / 2 - logo.image.GetWidth() / 2;
logo.y = Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2;
logo.sprite.SetPosition(logo.x, logo.y, 9000);
logo.sprite.SetOpacity(0);

# add label
label.image = Image("label.png");
label.sprite = Sprite(label.image);
label.x = Window.GetX() + Window.GetWidth() / 2 - label.image.GetWidth() / 2 ;
label.y = Window.GetY() + Window.GetHeight() / 2 + logo.image.GetHeight() / 2 ;
label.sprite.SetPosition(label.x, label.y, 9000);
label.sprite.SetOpacity(0);

image_total = 180;

# Loading
for (i = 1; i <= image_total; i++) 
{
    loading[i].image = Image("loading_" + i + ".png");
    loading[i].sprite = Sprite(loading[i].image);
    loading[i].sprite.SetOpacity(0);
    loading[i].x = Window.GetX() + Window.GetWidth() / 2 - loading[i].image.GetWidth() / 2;
    loading[i].y = Window.GetY() + Window.GetHeight() / 2 - loading[i].image.GetHeight() / 2;
    loading[i].sprite.SetPosition(loading[i].x, loading[i].y, 0);
}

# shutdown
for (i = 1; i <= image_total; i++) 
{
    shutdown[i].image = Image("shutdown_" + i + ".png");
    shutdown[i].sprite = Sprite(shutdown[i].image);
    shutdown[i].sprite.SetOpacity(0);
    shutdown[i].x = Window.GetX() + Window.GetWidth() / 2 - shutdown[i].image.GetWidth() / 2;
    shutdown[i].y = Window.GetY() + Window.GetHeight() / 2 - shutdown[i].image.GetHeight() / 2;
    shutdown[i].sprite.SetPosition(shutdown[i].x, shutdown[i].y, 0);
}

index = 1;
is_forward = 1;
flag = 1;
fun boot_callback() 
{
    # 50 frames per second
    label.sprite.SetOpacity(1);
	if (index >= image_total + 1) {
		logo.sprite.SetOpacity(1);
		
 	} else {
	    for (i = 1; i <= image_total; i++) 
	    {
	    	if (index != i) 
	    	{
	    		loading[i].sprite.SetOpacity(0);
	    	} 
	    	else 
	    	{
	    		loading[i].sprite.SetOpacity(1);
	    	}
	    }
	    index++;
	}
	flag++;
}

reboot_opacity = 1.0;
reboot_index = 1;
fun reboot_callback() 
{
    # 50 frames per second
    label.sprite.SetOpacity(1);
    for(j=1; j<=3; j++){
        if (reboot_index >= image_total + 1) {
            shutdown[180].sprite.SetOpacity(1);
        }
        else {
            for (i = 1; i <= image_total; i++){
                if (reboot_index != i){
                    shutdown[i].sprite.SetOpacity(0);
                } 
                else{
                    shutdown[i].sprite.SetOpacity(1);
                }
            }
            reboot_index++;
        }
    }
}

if (Plymouth.GetMode() == "boot")
{
    Plymouth.SetRefreshFunction(boot_callback);
} 
else 
{
    Plymouth.SetRefreshFunction(reboot_callback);
}

Plymouth.SetQuitFunction(reboot_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets && index <= 28)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);


#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(Window.GetX() + 10, Window.GetY() + 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);
